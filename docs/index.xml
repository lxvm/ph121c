<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ph 121c on Lorenzo X. Van Muñoz</title>
    <link>https://lxvm.github.io/ph121c/</link>
    <description>Recent content in Ph 121c on Lorenzo X. Van Muñoz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Apr 2021 20:29:07 -0700</lastBuildDate><atom:link href="https://lxvm.github.io/ph121c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assignment 4: Part 3</title>
      <link>https://lxvm.github.io/ph121c/asg4/tebd/</link>
      <pubDate>Wed, 19 May 2021 10:12:57 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg4/tebd/</guid>
      <description>Quench dynamics in the MBL phase $\require{physics}$
from copy import deepcopy import numpy as np import pandas as pd from scipy.linalg import expm import matplotlib.pyplot as plt %matplotlib inline from ph121c_lxvm import tensor, measure Summary We will again evolve this quantum state \begin{align} \ket{\psi(t=0)} = \ket{\xi} \otimes \cdots \otimes \ket{\xi} , \end{align} where $\ket{\xi} = \frac{1}{2} \left( \ket{\uparrow} - \sqrt{3} \ket{\downarrow} \right)$.
# Build initial state down = np.array([1., 0.]).reshape(2, 1) up = down[::-1].</description>
    </item>
    
    <item>
      <title>Assignment 4: Part 1</title>
      <link>https://lxvm.github.io/ph121c/asg4/imag/</link>
      <pubDate>Wed, 19 May 2021 10:12:54 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg4/imag/</guid>
      <description>Imaginary time evolution $ \require{physics} \def\bm{\boldsymbol} $
from copy import deepcopy import numpy as np import pandas as pd from scipy.linalg import expm from scipy.sparse.linalg import eigsh import matplotlib.pyplot as plt %matplotlib inline from ph121c_lxvm import tensor, basis, models What we are doing In this assignment there will be simulations of the dynamics of quantum systems with local Hamiltonians in the matrix product state (MPS) representation. This will be via the Time Evolving Block Decimation (TEBD) algorithm.</description>
    </item>
    
    <item>
      <title>Assignment 4: Part 2</title>
      <link>https://lxvm.github.io/ph121c/asg4/real/</link>
      <pubDate>Wed, 19 May 2021 10:12:49 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg4/real/</guid>
      <description>Real Time Evolution $\require{physics}$
from copy import deepcopy import numpy as np import pandas as pd from scipy.linalg import expm import matplotlib.pyplot as plt %matplotlib inline from ph121c_lxvm import tensor, measure Summary In this notebook, we will evolve a quantum state \begin{align} \ket{\psi(t=0)} = \ket{\xi} \otimes \cdots \otimes \ket{\xi} , \end{align} where $\ket{\xi} = \frac{1}{2} \left( \ket{\uparrow} - \sqrt{3} \ket{\downarrow} \right)$. We will also evolve a second product state to compare against: \begin{align} \ket{\psi (t=0)} &amp;amp;= \ket{\uparrow} \otimes \ket{\downarrow} \otimes \cdots .</description>
    </item>
    
    <item>
      <title>Assignment 3: Part 3</title>
      <link>https://lxvm.github.io/ph121c/asg3/violations/</link>
      <pubDate>Wed, 19 May 2021 02:58:02 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg3/violations/</guid>
      <description>Violations of ETH $ \require{physics} \def\bm{\boldsymbol} $
from itertools import product import numpy as np import pandas as pd from scipy import optimize import matplotlib.pyplot as plt %matplotlib inline from ph121c_lxvm import models, data, basis, measure Many-body localized model We introduce disorder to the model we have used before by allowing random coefficients: $$ H = \sum_{j=1}^L \sigma_j^z \sigma_{j+1}^z - \sum_{j=1}^L h_j^x \sigma_j^x - \sum_{j=1}^L h_j^z \sigma_j^z . $$ The random coefficients $h_j^x$ and $h_j^z$ are sampled uniformly from $[W, W]$, where the magnitude of $W$ determines the strength of the random noise.</description>
    </item>
    
    <item>
      <title>Assignment 3: Part 2</title>
      <link>https://lxvm.github.io/ph121c/asg3/eigenstate/</link>
      <pubDate>Wed, 19 May 2021 02:57:54 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg3/eigenstate/</guid>
      <description>Eigenstate ETH $\require{physics}$
import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline from ph121c_lxvm import data, models, basis, tensor, measure Observables in excited states We are going to measure the expectation values of the Pauli operators in the energy eigenbasis. And we are going to plot them. Same Hamiltonian as last time.
Here we are supposed to use the fact $\ket{\xi}$ from last time is translation invariant, so we&amp;rsquo;ll restrict to the $k=0$ momentum sector of the Hamiltonian by filtering states in the wrong sector with $\ev{T}{n} \neq 1$.</description>
    </item>
    
    <item>
      <title>Assignment 3: Part 1</title>
      <link>https://lxvm.github.io/ph121c/asg3/dynamic/</link>
      <pubDate>Wed, 19 May 2021 02:57:45 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg3/dynamic/</guid>
      <description>Dynamical ETH $ \require{physics} \def\bm{\boldsymbol} \def\indx{\sigma_1, \dots, \sigma_L} \def\ind{\tau_1, \dots, \tau_L} $
import numpy as np import pandas as pd from scipy import optimize import matplotlib.pyplot as plt %matplotlib inline from ph121c_lxvm import models, data, tests, measure, tensor, basis The model we will study in this notebook is: $$ H = \sum_{j=1}^L \sigma_j^z \sigma_{j+1}^z - h^x \sum_{j=1}^L \sigma_j^x - h^z \sum_{j=1}^L \sigma_j^z . $$ We are interested in the fact that $h^z \neq 0$ makes this TFIM Hamiltonian non-integrable, and creates eigenstate thermalization.</description>
    </item>
    
    <item>
      <title>Assignment 2</title>
      <link>https://lxvm.github.io/ph121c/asg2/bonus/</link>
      <pubDate>Thu, 13 May 2021 20:35:17 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg2/bonus/</guid>
      <description>Bonus $\require{physics}$
Verifying entanglement I wanted to check something about entanglement entropy in this assignment: are the Ising symmetry sectors of the Hamiltonian, which are uncoupled, not entangled? Since my code can handle building the Hamiltonian in the full x-basis as well as permutations to and from the Ising symmetry sectors, let&amp;rsquo;s test it!
We will find the ground state in the x basis and then sift out the system into a + symmetry sector and - symmetry sector, do an svd and look at the values.</description>
    </item>
    
    <item>
      <title>Assignment 2: Part 5</title>
      <link>https://lxvm.github.io/ph121c/asg2/mps/</link>
      <pubDate>Thu, 13 May 2021 20:35:17 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg2/mps/</guid>
      <description>Matrix product state representation for ground states $ \require{physics} \def\bm{\boldsymbol} $
Introduction Clearly, God did not conceive the universe as a point because God would not be able to take the outer product of two points to obtain vectors. So in the beginning, there were at least two vectors, and God took the outer product to make higher order tensors, the inner product to make lower order tensors: these were the binary operators on tensors.</description>
    </item>
    
    <item>
      <title>Assignment 2</title>
      <link>https://lxvm.github.io/ph121c/asg2/appendix/</link>
      <pubDate>Wed, 12 May 2021 01:26:57 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg2/appendix/</guid>
      <description>Appendix This notebook contains information only tangentially relevant to parts of the assignment, but may be useful anyways.
Runtimes TFIM simulations I was able to run simulations of up to size $L=20$ before my sparse matrix builder collapsed the kernel while converting lists of matrix elements in COO format to the CSR representation. As Brenden suggested, it would faster and less problematic to do this in Fortran and save the sparse matrix in an intermediate step as a HDF5 dataset before loading it into numpy, but then if all we cared about was performance we would just write everything in Fortran.</description>
    </item>
    
    <item>
      <title>Assignment 2: Part 3</title>
      <link>https://lxvm.github.io/ph121c/asg2/schmidt/</link>
      <pubDate>Thu, 06 May 2021 01:30:37 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg2/schmidt/</guid>
      <description>Truncation error of Schmidt decomposition Introduction This time, at the ground state we are interested in open boundary conditions and performing the Schmidt decomposition at the middle of the chain. We also want to compute approximate ground states and identify the errors of these approximations.
Program  Schmidt decomposition at the middle of the chain ($\ell = L/2$) Truncate the state at various ranks from 1 to $2^{L/2}$ For each approximation, calculate the Frobenius distance and the error in the ground state energy relative to the ground state energy from diagonalization  import numpy as np import pandas as pd import scipy.</description>
    </item>
    
    <item>
      <title>Assignment 2: Part 4</title>
      <link>https://lxvm.github.io/ph121c/asg2/entropy_es/</link>
      <pubDate>Thu, 06 May 2021 01:29:51 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg2/entropy_es/</guid>
      <description>Entanglement entropy of highly excited states Introduction We are interested in calculating the entanglement entropy for states at the middle of the spectrum, which sparse solvers do not do well (though it is ameliorated by transformations like shift-invert mode). Instead, I will obtain states via dense diagonalization
Program  Calculate wavefunctions at center of spectrum using dense solver Repeat entropy calculations as in part 2  import numpy as np import pandas as pd import scipy.</description>
    </item>
    
    <item>
      <title>Assignment 2: Part 2</title>
      <link>https://lxvm.github.io/ph121c/asg2/entropy_gs/</link>
      <pubDate>Thu, 06 May 2021 01:27:05 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg2/entropy_gs/</guid>
      <description>Entanglement entropy of highly excited states Introduction We are interested in calculating the entanglement entropy for states at the middle of the spectrum, which sparse solvers do not do well (though it is ameliorated by transformations like shift-invert mode). Instead, I will obtain states via dense diagonalization
Program  Calculate wavefunctions at center of spectrum using dense solver Repeat entropy calculations as in part 2  import numpy as np import pandas as pd import scipy.</description>
    </item>
    
    <item>
      <title>Assigment 2: Part 1</title>
      <link>https://lxvm.github.io/ph121c/asg2/images/</link>
      <pubDate>Tue, 27 Apr 2021 20:35:17 -0700</pubDate>
      
      <guid>https://lxvm.github.io/ph121c/asg2/images/</guid>
      <description>Part 1: Image compression Introduction I will be studying the singular value decomposition (SVD) of these images:
  The image on the left is of the assignment. Henceforth, it is pic_1.png. Because we are doing SVD for this assignment, I thought it would be appropriate to do SVD on the assignment. Textual data may also provide a challenge for SVD, because rendering text well is a nontrivial task.
The two images on the right come from my lab work on Se-Te nanostructures.</description>
    </item>
    
  </channel>
</rss>
